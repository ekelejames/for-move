# Since we're using the internal listener but need admin privileges
security.protocol=SASL_PLAINTEXT
sasl.mechanism=PLAIN
sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
    username="testuser_3" \
    password="testuser_2";
bootstrap.servers=kafka:9092




transforms=filter
transforms.filter.type=org.apache.kafka.connect.transforms.Filter
transforms.filter.predicate=excludeRecord
transforms.filter.negate=true

# Define the predicate to match the conditions
predicates.excludeRecord.type=org.apache.kafka.connect.transforms.predicates.And
predicates.excludeRecord.predicate1=resourceTypeCheck
predicates.excludeRecord.predicate2=resourceNameCheck

# Check if resourceType is "Cluster"
predicates.resourceTypeCheck.type=org.apache.kafka.connect.transforms.predicates.ValuePredicate
predicates.resourceTypeCheck.field=data.authorizationInfo.resourceType
predicates.resourceTypeCheck.value=Cluster

# Check if resourceName is "_confluent-link-metadata"
predicates.resourceNameCheck.type=org.apache.kafka.connect.transforms.predicates.ValuePredicate
predicates.resourceNameCheck.field=data.authorizationInfo.resourceName
predicates.resourceNameCheck.value=_confluent-link-metadata



"transforms": "t2",
"transforms.t2.predicate": "has-my-prefix",
"transforms.t2.negate": "true",
"transforms.t2.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
"transforms.t2.field": "c1",
"predicates": "has-my-prefix",
"predicates.has-my-prefix.type": "org.apache.kafka.connect.transforms.predicates.TopicNameMatches",
"predicates.has-my-prefix.pattern": "my-prefix-.*"